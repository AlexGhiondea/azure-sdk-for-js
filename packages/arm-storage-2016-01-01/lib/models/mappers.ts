/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const StorageAccountCheckNameAvailabilityParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountCheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "StorageAccountCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Storage/storageAccounts',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "AccountNameInvalid",
            "AlreadyExists"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      tier: {
        readOnly: true,
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Premium"
          ]
        }
      }
    }
  }
};

export const CustomDomain: msRest.CompositeMapper = {
  serializedName: "CustomDomain",
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      useSubDomain: {
        serializedName: "useSubDomain",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EncryptionService: msRest.CompositeMapper = {
  serializedName: "EncryptionService",
  type: {
    name: "Composite",
    className: "EncryptionService",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      lastEnabledTime: {
        readOnly: true,
        serializedName: "lastEnabledTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EncryptionServices: msRest.CompositeMapper = {
  serializedName: "EncryptionServices",
  type: {
    name: "Composite",
    className: "EncryptionServices",
    modelProperties: {
      blob: {
        serializedName: "blob",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      }
    }
  }
};

export const Encryption: msRest.CompositeMapper = {
  serializedName: "Encryption",
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      services: {
        serializedName: "services",
        type: {
          name: "Composite",
          className: "EncryptionServices"
        }
      },
      keySource: {
        required: true,
        isConstant: true,
        serializedName: "keySource",
        defaultValue: 'Microsoft.Storage',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCreateParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountCreateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountCreateParameters",
    modelProperties: {
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage"
          ]
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      }
    }
  }
};

export const Endpoints: msRest.CompositeMapper = {
  serializedName: "Endpoints",
  type: {
    name: "Composite",
    className: "Endpoints",
    modelProperties: {
      blob: {
        readOnly: true,
        serializedName: "blob",
        type: {
          name: "String"
        }
      },
      queue: {
        readOnly: true,
        serializedName: "queue",
        type: {
          name: "String"
        }
      },
      table: {
        readOnly: true,
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      file: {
        readOnly: true,
        serializedName: "file",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageAccount: msRest.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage"
          ]
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "ResolvingDNS",
            "Succeeded"
          ]
        }
      },
      primaryEndpoints: {
        readOnly: true,
        serializedName: "properties.primaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      primaryLocation: {
        readOnly: true,
        serializedName: "properties.primaryLocation",
        type: {
          name: "String"
        }
      },
      statusOfPrimary: {
        readOnly: true,
        serializedName: "properties.statusOfPrimary",
        type: {
          name: "Enum",
          allowedValues: [
            "Available",
            "Unavailable"
          ]
        }
      },
      lastGeoFailoverTime: {
        readOnly: true,
        serializedName: "properties.lastGeoFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      secondaryLocation: {
        readOnly: true,
        serializedName: "properties.secondaryLocation",
        type: {
          name: "String"
        }
      },
      statusOfSecondary: {
        readOnly: true,
        serializedName: "properties.statusOfSecondary",
        type: {
          name: "Enum",
          allowedValues: [
            "Available",
            "Unavailable"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      customDomain: {
        readOnly: true,
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      secondaryEndpoints: {
        readOnly: true,
        serializedName: "properties.secondaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      encryption: {
        readOnly: true,
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        readOnly: true,
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      }
    }
  }
};

export const StorageAccountKey: msRest.CompositeMapper = {
  serializedName: "StorageAccountKey",
  type: {
    name: "Composite",
    className: "StorageAccountKey",
    modelProperties: {
      keyName: {
        readOnly: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      permissions: {
        readOnly: true,
        serializedName: "permissions",
        type: {
          name: "Enum",
          allowedValues: [
            "READ",
            "FULL"
          ]
        }
      }
    }
  }
};

export const StorageAccountListKeysResult: msRest.CompositeMapper = {
  serializedName: "StorageAccountListKeysResult",
  type: {
    name: "Composite",
    className: "StorageAccountListKeysResult",
    modelProperties: {
      keys: {
        readOnly: true,
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountKey"
            }
          }
        }
      }
    }
  }
};

export const StorageAccountRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "StorageAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      }
    }
  }
};

export const UsageName: msRest.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountsPerSecond",
            "BytesPerSecond"
          ]
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const StorageAccountListResult: msRest.CompositeMapper = {
  serializedName: "StorageAccountListResult",
  type: {
    name: "Composite",
    className: "StorageAccountListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      }
    }
  }
};

export const UsageListResult: msRest.CompositeMapper = {
  serializedName: "UsageListResult",
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

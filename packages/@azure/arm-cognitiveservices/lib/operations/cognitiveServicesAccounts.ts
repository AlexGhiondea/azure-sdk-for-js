/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/cognitiveServicesAccountsMappers";
import * as Parameters from "../models/parameters";
import { CognitiveServicesManagementClientContext } from "../cognitiveServicesManagementClientContext";

/** Class representing a CognitiveServicesAccounts. */
export class CognitiveServicesAccounts {
  private readonly client: CognitiveServicesManagementClientContext;

  /**
   * Create a CognitiveServicesAccounts.
   * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: CognitiveServicesManagementClientContext) {
    this.client = client;
  }

  /**
   * Create Cognitive Services Account. Accounts is a resource group wide resource type. It holds the
   * keys for developer to access intelligent APIs. It's also the resource type for billing.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param parameters The parameters to provide for the created account.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, parameters: Models.CognitiveServicesAccountCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param parameters The parameters to provide for the created account.
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, parameters: Models.CognitiveServicesAccountCreateParameters, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param parameters The parameters to provide for the created account.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, parameters: Models.CognitiveServicesAccountCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  create(resourceGroupName: string, accountName: string, parameters: Models.CognitiveServicesAccountCreateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccount>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccount>): Promise<Models.CognitiveServicesAccountsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsCreateResponse>;
  }

  /**
   * Updates a Cognitive Services account
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, options?: Models.CognitiveServicesAccountsUpdateOptionalParams): Promise<Models.CognitiveServicesAccountsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, options: Models.CognitiveServicesAccountsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  update(resourceGroupName: string, accountName: string, options?: Models.CognitiveServicesAccountsUpdateOptionalParams | msRest.ServiceCallback<Models.CognitiveServicesAccount>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccount>): Promise<Models.CognitiveServicesAccountsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsUpdateResponse>;
  }

  /**
   * Deletes a Cognitive Services account from the resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns a Cognitive Services account specified by the parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsGetPropertiesResponse>
   */
  getProperties(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsGetPropertiesResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  getProperties(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  getProperties(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccount>): void;
  getProperties(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccount>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccount>): Promise<Models.CognitiveServicesAccountsGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getPropertiesOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsGetPropertiesResponse>;
  }

  /**
   * Returns all the resources of a particular type belonging to a resource group
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): Promise<Models.CognitiveServicesAccountsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsListByResourceGroupResponse>;
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccountListResult>): Promise<Models.CognitiveServicesAccountsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsListResponse>;
  }

  /**
   * Lists the account keys for the specified Cognitive Services account.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Congitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsListKeysResponse>
   */
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Congitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Congitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): void;
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): Promise<Models.CognitiveServicesAccountsListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsListKeysResponse>;
  }

  /**
   * Regenerates the specified account key for the specified Cognitive Services account.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsRegenerateKeyResponse>
   */
  regenerateKey(resourceGroupName: string, accountName: string, options?: Models.CognitiveServicesAccountsRegenerateKeyOptionalParams): Promise<Models.CognitiveServicesAccountsRegenerateKeyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, accountName: string, options: Models.CognitiveServicesAccountsRegenerateKeyOptionalParams, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): void;
  regenerateKey(resourceGroupName: string, accountName: string, options?: Models.CognitiveServicesAccountsRegenerateKeyOptionalParams | msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccountKeys>): Promise<Models.CognitiveServicesAccountsRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      regenerateKeyOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsRegenerateKeyResponse>;
  }

  /**
   * List available SKUs for the requested Cognitive Services account
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.CognitiveServicesAccountsListSkusResponse>
   */
  listSkus(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.CognitiveServicesAccountsListSkusResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param callback The callback
   */
  listSkus(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountEnumerateSkusResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the cognitive services account within the specified resource
   * group. Cognitive Services account names must be between 3 and 24 characters in length and use
   * numbers and lower-case letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkus(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CognitiveServicesAccountEnumerateSkusResult>): void;
  listSkus(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CognitiveServicesAccountEnumerateSkusResult>, callback?: msRest.ServiceCallback<Models.CognitiveServicesAccountEnumerateSkusResult>): Promise<Models.CognitiveServicesAccountsListSkusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listSkusOperationSpec,
      callback) as Promise<Models.CognitiveServicesAccountsListSkusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CognitiveServicesAccountCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccount
    },
    201: {
      bodyMapper: Mappers.CognitiveServicesAccount
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      sku: [
        "options",
        "sku"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.CognitiveServicesAccountUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccount
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccount
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/accounts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccountKeys
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/regenerateKey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      keyName: [
        "options",
        "keyName"
      ]
    },
    mapper: {
      ...Mappers.RegenerateKeyParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccountKeys
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/skus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CognitiveServicesAccountEnumerateSkusResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/workspacesMappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsManagementClientContext } from "../operationalInsightsManagementClientContext";

/** Class representing a Workspaces. */
export class Workspaces {
  private readonly client: OperationalInsightsManagementClientContext;

  /**
   * Create a Workspaces.
   * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
   */
  constructor(client: OperationalInsightsManagementClientContext) {
    this.client = client;
  }

  /**
   * Get a list of workspaces which the current user has administrator privileges and are not
   * associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesListLinkTargetsResponse>
   */
  listLinkTargets(options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesListLinkTargetsResponse>;
  /**
   * @param callback The callback
   */
  listLinkTargets(callback: msRest.ServiceCallback<Models.LinkTarget[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listLinkTargets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkTarget[]>): void;
  listLinkTargets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkTarget[]>, callback?: msRest.ServiceCallback<Models.LinkTarget[]>): Promise<Models.WorkspacesListLinkTargetsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listLinkTargetsOperationSpec,
      callback) as Promise<Models.WorkspacesListLinkTargetsResponse>;
  }

  /**
   * Gets the schema for a given workspace.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesGetSchemaResponse>
   */
  getSchema(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesGetSchemaResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param callback The callback
   */
  getSchema(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.SearchGetSchemaResponse>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSchema(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SearchGetSchemaResponse>): void;
  getSchema(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SearchGetSchemaResponse>, callback?: msRest.ServiceCallback<Models.SearchGetSchemaResponse>): Promise<Models.WorkspacesGetSchemaResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      getSchemaOperationSpec,
      callback) as Promise<Models.WorkspacesGetSchemaResponse>;
  }

  /**
   * Submit a search for a given workspace. The response will contain an id to track the search. User
   * can use the id to poll the search status and get the full search result later if the search
   * takes long time to finish.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param parameters The parameters required to execute a search query.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesGetSearchResultsResponse>
   */
  getSearchResults(resourceGroupName: string, workspaceName: string, parameters: Models.SearchParameters, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesGetSearchResultsResponse> {
    return this.beginGetSearchResults(resourceGroupName,workspaceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WorkspacesGetSearchResultsResponse>;
  }

  /**
   * Gets updated search results for a given search query.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param id The id of the search that will have results updated. You can get the id from the
   * response of the GetResults call.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesUpdateSearchResultsResponse>
   */
  updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesUpdateSearchResultsResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param id The id of the search that will have results updated. You can get the id from the
   * response of the GetResults call.
   * @param callback The callback
   */
  updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, callback: msRest.ServiceCallback<Models.SearchResultsResponse>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param id The id of the search that will have results updated. You can get the id from the
   * response of the GetResults call.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SearchResultsResponse>): void;
  updateSearchResults(resourceGroupName: string, workspaceName: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SearchResultsResponse>, callback?: msRest.ServiceCallback<Models.SearchResultsResponse>): Promise<Models.WorkspacesUpdateSearchResultsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        id,
        options
      },
      updateSearchResultsOperationSpec,
      callback) as Promise<Models.WorkspacesUpdateSearchResultsResponse>;
  }

  /**
   * Purges data in an Log Analytics workspace by a set of user-defined filters.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesPurgeResponse>
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesPurgeResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param callback The callback
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, callback: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): void;
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspacePurgeResponse>, callback?: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): Promise<Models.WorkspacesPurgeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        body,
        options
      },
      purgeOperationSpec,
      callback) as Promise<Models.WorkspacesPurgeResponse>;
  }

  /**
   * Gets status of an ongoing purge operation.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesGetPurgeStatusResponse>
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesGetPurgeStatusResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param callback The callback
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): void;
  getPurgeStatus(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>, callback?: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): Promise<Models.WorkspacesGetPurgeStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      getPurgeStatusOperationSpec,
      callback) as Promise<Models.WorkspacesGetPurgeStatusResponse>;
  }

  /**
   * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft
   * Operational Insights agents to the workspace.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesListKeysResponse>
   */
  listKeys(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesListKeysResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.SharedKeys>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedKeys>): void;
  listKeys(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedKeys>, callback?: msRest.ServiceCallback<Models.SharedKeys>): Promise<Models.WorkspacesListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.WorkspacesListKeysResponse>;
  }

  /**
   * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect
   * Microsoft Operational Insights agents to the workspace.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacesRegenerateSharedKeysResponse>
   */
  regenerateSharedKeys(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacesRegenerateSharedKeysResponse>;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param callback The callback
   */
  regenerateSharedKeys(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.SharedKeys>): void;
  /**
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateSharedKeys(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedKeys>): void;
  regenerateSharedKeys(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedKeys>, callback?: msRest.ServiceCallback<Models.SharedKeys>): Promise<Models.WorkspacesRegenerateSharedKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      regenerateSharedKeysOperationSpec,
      callback) as Promise<Models.WorkspacesRegenerateSharedKeysResponse>;
  }

  /**
   * Submit a search for a given workspace. The response will contain an id to track the search. User
   * can use the id to poll the search status and get the full search result later if the search
   * takes long time to finish.
   * @param resourceGroupName The Resource Group name.
   * @param workspaceName The Log Analytics Workspace name.
   * @param parameters The parameters required to execute a search query.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetSearchResults(resourceGroupName: string, workspaceName: string, parameters: Models.SearchParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        parameters,
        options
      },
      beginGetSearchResultsOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listLinkTargetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/linkTargets",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkTarget"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SearchGetSchemaResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSearchResultsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/search/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SearchResultsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const purgeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.WorkspacePurgeBody,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.WorkspacePurgeResponse,
      headersMapper: Mappers.WorkspacesPurgeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurgeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.workspaceName,
    Parameters.purgeId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkspacePurgeStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/listKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateSharedKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetSearchResultsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/search",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SearchParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SearchResultsResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mediaServiceOperationsMappers";
import * as Parameters from "../models/parameters";
import { MediaServicesManagementClientContext } from "../mediaServicesManagementClientContext";

/** Class representing a MediaServiceOperations. */
export class MediaServiceOperations {
  private readonly client: MediaServicesManagementClientContext;

  /**
   * Create a MediaServiceOperations.
   * @param {MediaServicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: MediaServicesManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks whether the Media Service resource name is available. The name must be globally unique.
   * @param parameters Properties needed to check the availability of a name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceCheckNameAvailabilityResponse>
   */
  checkNameAvailability(parameters: Models.CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceCheckNameAvailabilityResponse>;
  /**
   * @param parameters Properties needed to check the availability of a name.
   * @param callback The callback
   */
  checkNameAvailability(parameters: Models.CheckNameAvailabilityInput, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  /**
   * @param parameters Properties needed to check the availability of a name.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(parameters: Models.CheckNameAvailabilityInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  checkNameAvailability(parameters: Models.CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): Promise<Models.MediaServiceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.MediaServiceCheckNameAvailabilityResponse>;
  }

  /**
   * Lists all of the Media Services in a resource group.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.MediaServiceCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MediaServiceCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MediaServiceCollection>, callback?: msRest.ServiceCallback<Models.MediaServiceCollection>): Promise<Models.MediaServiceListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.MediaServiceListByResourceGroupResponse>;
  }

  /**
   * Gets a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceGetResponse>
   */
  get(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param callback The callback
   */
  get(resourceGroupName: string, mediaServiceName: string, callback: msRest.ServiceCallback<Models.MediaService>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, mediaServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MediaService>): void;
  get(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MediaService>, callback?: msRest.ServiceCallback<Models.MediaService>): Promise<Models.MediaServiceGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MediaServiceGetResponse>;
  }

  /**
   * Creates a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for creation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceCreateResponse>
   */
  create(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceCreateResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for creation.
   * @param callback The callback
   */
  create(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, callback: msRest.ServiceCallback<Models.MediaService>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for creation.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MediaService>): void;
  create(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MediaService>, callback?: msRest.ServiceCallback<Models.MediaService>): Promise<Models.MediaServiceCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.MediaServiceCreateResponse>;
  }

  /**
   * Deletes a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, mediaServiceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, mediaServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for update.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceUpdateResponse>
   */
  update(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for update.
   * @param callback The callback
   */
  update(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, callback: msRest.ServiceCallback<Models.MediaService>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Media Service properties needed for update.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MediaService>): void;
  update(resourceGroupName: string, mediaServiceName: string, parameters: Models.MediaService, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MediaService>, callback?: msRest.ServiceCallback<Models.MediaService>): Promise<Models.MediaServiceUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.MediaServiceUpdateResponse>;
  }

  /**
   * Regenerates a primary or secondary key for a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to regenerate the Media Service key.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceRegenerateKeyResponse>
   */
  regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: Models.RegenerateKeyInput, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceRegenerateKeyResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to regenerate the Media Service key.
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: Models.RegenerateKeyInput, callback: msRest.ServiceCallback<Models.RegenerateKeyOutput>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to regenerate the Media Service key.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: Models.RegenerateKeyInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegenerateKeyOutput>): void;
  regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: Models.RegenerateKeyInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegenerateKeyOutput>, callback?: msRest.ServiceCallback<Models.RegenerateKeyOutput>): Promise<Models.MediaServiceRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        parameters,
        options
      },
      regenerateKeyOperationSpec,
      callback) as Promise<Models.MediaServiceRegenerateKeyResponse>;
  }

  /**
   * Lists the keys for a Media Service.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MediaServiceListKeysResponse>
   */
  listKeys(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MediaServiceListKeysResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, mediaServiceName: string, callback: msRest.ServiceCallback<Models.ServiceKeys>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, mediaServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceKeys>): void;
  listKeys(resourceGroupName: string, mediaServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceKeys>, callback?: msRest.ServiceCallback<Models.ServiceKeys>): Promise<Models.MediaServiceListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.MediaServiceListKeysResponse>;
  }

  /**
   * Synchronizes storage account keys for a storage account associated with the Media Service
   * account.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to synchronize the keys for a storage account to the Media
   * Service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: Models.SyncStorageKeysInput, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to synchronize the keys for a storage account to the Media
   * Service.
   * @param callback The callback
   */
  syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: Models.SyncStorageKeysInput, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param mediaServiceName Name of the Media Service.
   * @param parameters Properties needed to synchronize the keys for a storage account to the Media
   * Service.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: Models.SyncStorageKeysInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: Models.SyncStorageKeysInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        mediaServiceName,
        parameters,
        options
      },
      syncStorageKeysOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckNameAvailabilityInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MediaServiceCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MediaService
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.MediaService,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MediaService
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.MediaService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MediaService
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RegenerateKeyInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RegenerateKeyOutput
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceKeys
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const syncStorageKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.mediaServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SyncStorageKeysInput,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

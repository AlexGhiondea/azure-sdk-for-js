/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing MaxSizeCapability.
 * The maximum size capability.
 *
 */
export interface MaxSizeCapability {
  /**
   * @member {number} [limit] The maximum size limit (see 'unit' for the
   * units).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {MaxSizeUnits} [unit] The units that the limit is expressed in.
   * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes',
   * 'Petabytes'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: MaxSizeUnits;
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing PerformanceLevelCapability.
 * The performance level capability.
 *
 */
export interface PerformanceLevelCapability {
  /**
   * @member {number} [value] Performance level value.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: number;
  /**
   * @member {PerformanceLevelUnit} [unit] Unit type used to measure service
   * objective performance level. Possible values include: 'DTU'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: PerformanceLevelUnit;
}

/**
 * @interface
 * An interface representing ServiceLevelObjectiveCapability.
 * The service objectives capability.
 *
 */
export interface ServiceLevelObjectiveCapability {
  /**
   * @member {string} [id] The unique ID of the service objective.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The service objective name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {MaxSizeCapability[]} [supportedMaxSizes] The list of supported
   * maximum database sizes for this service objective.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedMaxSizes?: MaxSizeCapability[];
  /**
   * @member {PerformanceLevelCapability} [performanceLevel] The performance
   * level of the service objective capability.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly performanceLevel?: PerformanceLevelCapability;
  /**
   * @member {MaxSizeCapability} [includedMaxSize] The included (free) max size
   * for this service level objective.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing EditionCapability.
 * The edition capability.
 *
 */
export interface EditionCapability {
  /**
   * @member {string} [name] The database edition name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ServiceLevelObjectiveCapability[]}
   * [supportedServiceLevelObjectives] The list of supported service objectives
   * for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedServiceLevelObjectives?: ServiceLevelObjectiveCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing ElasticPoolPerDatabaseMinDtuCapability.
 * The minimum per-database DTU capability.
 *
 */
export interface ElasticPoolPerDatabaseMinDtuCapability {
  /**
   * @member {number} [limit] The minimum DTUs per database.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing ElasticPoolPerDatabaseMaxDtuCapability.
 * The max per-database DTU capability.
 *
 */
export interface ElasticPoolPerDatabaseMaxDtuCapability {
  /**
   * @member {number} [limit] The maximum DTUs per database.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {ElasticPoolPerDatabaseMinDtuCapability[]}
   * [supportedPerDatabaseMinDtus] The list of supported min database DTUs.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedPerDatabaseMinDtus?: ElasticPoolPerDatabaseMinDtuCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing ElasticPoolDtuCapability.
 * The Elastic Pool DTU capability.
 *
 */
export interface ElasticPoolDtuCapability {
  /**
   * @member {number} [limit] The DTU limit for the pool.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {number} [maxDatabaseCount] The maximum number of databases
   * supported.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxDatabaseCount?: number;
  /**
   * @member {MaxSizeCapability} [includedMaxSize] The included (free) max size
   * for this DTU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * @member {MaxSizeCapability[]} [supportedMaxSizes] The list of supported
   * max sizes.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedMaxSizes?: MaxSizeCapability[];
  /**
   * @member {MaxSizeCapability[]} [supportedPerDatabaseMaxSizes] The list of
   * supported per database max sizes.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedPerDatabaseMaxSizes?: MaxSizeCapability[];
  /**
   * @member {ElasticPoolPerDatabaseMaxDtuCapability[]}
   * [supportedPerDatabaseMaxDtus] The list of supported per database max DTUs.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedPerDatabaseMaxDtus?: ElasticPoolPerDatabaseMaxDtuCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing ElasticPoolEditionCapability.
 * The elastic pool edition capability.
 *
 */
export interface ElasticPoolEditionCapability {
  /**
   * @member {string} [name] The elastic pool edition name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ElasticPoolDtuCapability[]} [supportedElasticPoolDtus] The list
   * of supported elastic pool DTU levels for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedElasticPoolDtus?: ElasticPoolDtuCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing ServerVersionCapability.
 * The server capability
 *
 */
export interface ServerVersionCapability {
  /**
   * @member {string} [name] The server version name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {EditionCapability[]} [supportedEditions] The list of supported
   * database editions.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedEditions?: EditionCapability[];
  /**
   * @member {ElasticPoolEditionCapability[]} [supportedElasticPoolEditions]
   * The list of supported elastic pool editions.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedElasticPoolEditions?: ElasticPoolEditionCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing LocationCapabilities.
 * The location capability.
 *
 */
export interface LocationCapabilities {
  /**
   * @member {string} [name] The location name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ServerVersionCapability[]} [supportedServerVersions] The list of
   * supported server versions.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly supportedServerVersions?: ServerVersionCapability[];
  /**
   * @member {CapabilityStatus} [status] The status of the capability. Possible
   * values include: 'Visible', 'Available', 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  reason?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * ARM resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * ARM proxy resource.
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing SubscriptionUsage.
 * Usage Metric of a Subscription in a Location.
 *
 * @extends ProxyResource
 */
export interface SubscriptionUsage extends ProxyResource {
  /**
   * @member {string} [displayName] User-readable name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly displayName?: string;
  /**
   * @member {number} [currentValue] Current value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentValue?: number;
  /**
   * @member {number} [limit] Boundary value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {string} [unit] Unit of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * ARM tracked top level resource.
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {string} location Resource location.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing SqlManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface SqlManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the SubscriptionUsageListResult.
 * A list of subscription usage metrics in a location.
 *
 * @extends Array<SubscriptionUsage>
 */
export interface SubscriptionUsageListResult extends Array<SubscriptionUsage> {
  /**
   * @member {string} [nextLink] Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for MaxSizeUnits.
 * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes'
 * @readonly
 * @enum {string}
 */
export type MaxSizeUnits = 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Petabytes';

/**
 * Defines values for CapabilityStatus.
 * Possible values include: 'Visible', 'Available', 'Default', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type CapabilityStatus = 'Visible' | 'Available' | 'Default' | 'Disabled';

/**
 * Defines values for PerformanceLevelUnit.
 * Possible values include: 'DTU'
 * @readonly
 * @enum {string}
 */
export type PerformanceLevelUnit = 'DTU';

/**
 * Contains response data for the listByLocation operation.
 */
export type CapabilitiesListByLocationResponse = LocationCapabilities & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocationCapabilities;
    };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type SubscriptionUsagesListByLocationResponse = SubscriptionUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionUsageListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionUsagesGetResponse = SubscriptionUsage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionUsage;
    };
};

/**
 * Contains response data for the listByLocationNext operation.
 */
export type SubscriptionUsagesListByLocationNextResponse = SubscriptionUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubscriptionUsageListResult;
    };
};

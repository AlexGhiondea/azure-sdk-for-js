/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const MaxSizeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Megabytes",
            "Gigabytes",
            "Terabytes",
            "Petabytes"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "PerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "PerformanceLevelCapability",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "DTU"
          ]
        }
      }
    }
  }
};

export const ServiceLevelObjectiveCapability: msRest.CompositeMapper = {
  serializedName: "ServiceLevelObjectiveCapability",
  type: {
    name: "Composite",
    className: "ServiceLevelObjectiveCapability",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      performanceLevel: {
        readOnly: true,
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EditionCapability: msRest.CompositeMapper = {
  serializedName: "EditionCapability",
  type: {
    name: "Composite",
    className: "EditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServiceLevelObjectives: {
        readOnly: true,
        serializedName: "supportedServiceLevelObjectives",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceLevelObjectiveCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMinDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMinDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMinDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMaxDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMaxDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMaxDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      supportedPerDatabaseMinDtus: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMinDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMinDtuCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      maxDatabaseCount: {
        readOnly: true,
        serializedName: "maxDatabaseCount",
        type: {
          name: "Number"
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxSizes: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxDtus: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMaxDtuCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolEditionCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolEditionCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedElasticPoolDtus: {
        readOnly: true,
        serializedName: "supportedElasticPoolDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolDtuCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVersionCapability: msRest.CompositeMapper = {
  serializedName: "ServerVersionCapability",
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EditionCapability"
            }
          }
        }
      },
      supportedElasticPoolEditions: {
        readOnly: true,
        serializedName: "supportedElasticPoolEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolEditionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationCapabilities: msRest.CompositeMapper = {
  serializedName: "LocationCapabilities",
  type: {
    name: "Composite",
    className: "LocationCapabilities",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServerVersions: {
        readOnly: true,
        serializedName: "supportedServerVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const SubscriptionUsage: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsage",
  type: {
    name: "Composite",
    className: "SubscriptionUsage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "properties.currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "properties.limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubscriptionUsageListResult: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsageListResult",
  type: {
    name: "Composite",
    className: "SubscriptionUsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionUsage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
